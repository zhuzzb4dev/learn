<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mo.persist.dao.UserDao">

    <resultMap id="BaseResultMap" type="com.mo.persist.entity.User">
        <!--@Table user-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="uuid" column="uuid" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
        <result property="token" column="token" jdbcType="VARCHAR"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="BaseResultMap">
        select
          id, uuid, email, password, create_time, update_time, last_login_time, token
        from myproject.user
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BaseResultMap">
        select
          id, uuid, email, password, create_time, update_time, last_login_time, token
        from myproject.user
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="BaseResultMap">
        select
          id, uuid, email, password, create_time, update_time, last_login_time, token
        from myproject.user
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="uuid != null and uuid != ''">
                and uuid = #{uuid}
            </if>
            <if test="email != null and email != ''">
                and email = #{email}
            </if>
            <if test="password != null and password != ''">
                and password = #{password}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
            <if test="lastLoginTime != null">
                and last_login_time = #{lastLoginTime}
            </if>
            <if test="token != null and token != ''">
                and token = #{token}
            </if>
        </where>
    </select>
    <select id="queryByEmail" resultType="com.mo.persist.entity.User" parameterType="string">
        select
            id, uuid, email, password, create_time, update_time, last_login_time, token
        from myproject.user where email = #{email}
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into myproject.user(uuid, email, password, create_time, update_time, last_login_time, token)
        values (#{uuid}, #{email}, #{password}, #{createTime}, #{updateTime}, #{lastLoginTime}, #{token})
    </insert>
    <insert id="register" keyProperty="id" useGeneratedKeys="true">
        insert into myproject.user(uuid, email, password, token)
        values (#{uuid}, #{email}, #{password}, #{token})
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update myproject.user
        <set>
            <if test="uuid != null and uuid != ''">
                uuid = #{uuid},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="lastLoginTime != null">
                last_login_time = #{lastLoginTime},
            </if>
            <if test="token != null and token != ''">
                token = #{token},
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateOnLogin">
        update myproject.user set token = #{token},last_login_time = now() where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from myproject.user where id = #{id}
    </delete>

</mapper>